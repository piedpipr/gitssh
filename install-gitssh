#!/bin/sh

#================================================================#
# GitSSH Auto-Installer
# Automatically clones and installs GitSSH from GitHub
# POSIX Compatible
#================================================================#

set -e  # Exit on any error

# Configuration
REPO_URL="https://github.com/piedpipr/gitssh"
TEMP_DIR="/tmp/gitssh-install-$$"
INSTALL_DIR="$TEMP_DIR/gitssh"

#================================================================#
# UTILITY FUNCTIONS
#================================================================#

show_banner() {
    cat << 'EOF'
╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║            ██████╗         ███████╗███████╗██╗  ██╗           ║
║           ██╔════╝ ██╗ ██╗ ██╔════╝██╔════╝██║  ██║           ║
║           ██║  ███╗══╝████║███████╗███████╗███████║           ║
║           ██║   ██║██║ ██║ ╚════██║╚════██║██╔══██║           ║
║           ██████╔╝ ██║ ██║ ███████║███████║██║  ██║           ║
║           ╚═════╝  ╚═╝ ╚═╝ ╚══════╝╚══════╝╚═╝  ╚═╝v1.0-Oz    ║
║                     <-POSIX Compatible->                      ║
║ Multi Git,GitHub,GitLab and SSH account management with ease! ║
╚═══════════════════════════════════════════════════════════════╝
EOF
}

show_progress() {
    current="$1"
    total="$2"
    message="$3"
    width=50
    
    # POSIX arithmetic
    percentage=$((current * 100 / total))
    filled=$((current * width / total))
    empty=$((width - filled))
    
    printf "\r\033[0;34m[\033[0m"
    
    # Print filled portion
    i=0
    while [ $i -lt $filled ]; do
        printf "█"
        i=$((i + 1))
    done
    
    # Print empty portion
    i=0
    while [ $i -lt $empty ]; do
        printf " "
        i=$((i + 1))
    done
    
    printf "\033[0;34m] %d%% - %s\033[0m" "$percentage" "$message"
    
    if [ "$current" -eq "$total" ]; then
        printf "\n"
    fi
}

log_info() {
    printf "\033[0;34m[INFO]\033[0m %s\n" "$1"
}

log_success() {
    printf "\033[0;32m[SUCCESS]\033[0m %s\n" "$1"
}

log_error() {
    printf "\033[0;31m[ERROR]\033[0m %s\n" "$1" >&2
}

log_warning() {
    printf "\033[1;33m[WARNING]\033[0m %s\n" "$1"
}

cleanup() {
    if [ -d "$TEMP_DIR" ]; then
        log_info "Cleaning up temporary files..."
        rm -rf "$TEMP_DIR"
    fi
}

check_dependencies() {
    missing_deps=""
    
    # Check for git
    if ! command -v git >/dev/null 2>&1; then
        missing_deps="$missing_deps git"
    fi
    
    # Check for chmod
    if ! command -v chmod >/dev/null 2>&1; then
        missing_deps="$missing_deps chmod"
    fi
    
    if [ -n "$missing_deps" ]; then
        log_error "Missing required dependencies:$missing_deps"
        log_error "Please install them and try again."
        exit 1
    fi
}

# POSIX compatible sleep alternative using read with timeout where available
posix_sleep() {
    duration="$1"
    # Try different sleep methods
    if command -v sleep >/dev/null 2>&1; then
        sleep "$duration"
    elif command -v ping >/dev/null 2>&1; then
        # Use ping as timer (works on most systems)
        ping -c 1 -W "${duration}000" 127.0.0.1 >/dev/null 2>&1 || true
    else
        # Fallback: busy wait (not ideal but POSIX compatible)
        start_time=$(date +%s)
        while [ $(($(date +%s) - start_time)) -lt "$duration" ]; do
            continue
        done
    fi
}

#================================================================#
# MAIN INSTALLATION PROCESS
#================================================================#

main() {
    # Set up cleanup trap
    trap cleanup EXIT INT TERM
    
    # Show banner
    show_banner
    
    # Check dependencies
    log_info "Checking system dependencies..."
    check_dependencies
    show_progress 1 6 "Dependencies checked"
    posix_sleep 1
    
    # Create temporary directory
    log_info "Creating temporary directory..."
    mkdir -p "$TEMP_DIR"
    show_progress 2 6 "Temporary directory created"
    posix_sleep 1
    
    # Clone repository
    log_info "Cloning GitSSH repository..."
    if git clone "$REPO_URL" "$INSTALL_DIR" >/dev/null 2>&1; then
        show_progress 3 6 "Repository cloned successfully"
    else
        show_progress 3 6 "Repository clone failed"
        log_error "Failed to clone repository from $REPO_URL"
        log_error "Please check your internet connection and try again."
        exit 1
    fi
    posix_sleep 1
    
    # Change to install directory
    log_info "Entering installation directory..."
    cd "$INSTALL_DIR"
    show_progress 4 6 "Changed to install directory"
    posix_sleep 1
    
    # Make install script executable
    log_info "Making install script executable..."
    if [ -f "install" ]; then
        chmod +x install
        show_progress 5 6 "Install script made executable"
    else
        show_progress 5 6 "Install script not found"
        log_error "Install script not found in repository"
        log_error "Expected file: $INSTALL_DIR/install"
        exit 1
    fi
    posix_sleep 1
    
    # Complete preparation
    show_progress 6 6 "Installation preparation complete"
    printf "\n"
    
    # Run installer
    log_success "Repository downloaded and prepared successfully!"
    printf "\n"
    log_info "Starting GitSSH installation..."
    printf "\033[1;33mPress Enter to continue with installation...\033[0m"
    
    # POSIX compatible read
    if command -v read >/dev/null 2>&1; then
        read dummy
    else
        # Fallback for systems without read builtin
        head -n 1 >/dev/null
    fi
    
    # Execute the install script
    if ./install; then
        printf "\n"
        log_success "GitSSH installation completed successfully!"
        log_info "You can now use 'gitssh' command from anywhere in your terminal."
        printf "\n"
        printf "\033[0;32mTo get started, try:\033[0m\n"
        printf "  \033[0;36mgitssh --help\033[0m     # Show help\n"
        printf "  \033[0;36mgitssh init\033[0m       # Initialize GitSSH\n"
        printf "  \033[0;36mgitssh add-user\033[0m   # Add a new SSH user\n"
    else
        printf "\n"
        log_error "Installation failed!"
        log_error "Please check the error messages above and try again."
        exit 1
    fi
}

#================================================================#
# ENTRY POINT
#================================================================#

# Check if running as root (optional warning)
if [ "$(id -u)" -eq 0 ]; then
    log_warning "Running as root. GitSSH is typically installed for individual users."
    printf "\033[1;33mContinue anyway? (y/N): \033[0m"
    
    # POSIX compatible read
    if command -v read >/dev/null 2>&1; then
        read response
    else
        response=$(head -n 1)
    fi
    
    case "$response" in
        [yY]|[yY][eE][sS]) 
            log_info "Proceeding with root installation..."
            ;;
        *)
            log_info "Installation cancelled."
            exit 0
            ;;
    esac
fi

# Run main installation
main "$@"